<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Apoorv's Blog</title><link href="http://nerdap.github.io/" rel="alternate"></link><link href="http://nerdap.github.io/feeds/all.atom.xml" rel="self"></link><id>http://nerdap.github.io/</id><updated>2013-07-08T22:23:00+05:30</updated><entry><title>GSoC 2013 Weeks 3 and 4 Review</title><link href="http://nerdap.github.io/gsoc-2013-weeks-3-and-4.html" rel="alternate"></link><updated>2013-07-08T22:23:00+05:30</updated><author><name>Apoorv Upreti</name></author><id>tag:nerdap.github.io,2013-07-08:gsoc-2013-weeks-3-and-4.html</id><summary type="html">&lt;p&gt;I wasn't able to post my updates last week, so I'm going to bunch them together with this week's updates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The build system for Linux is now ready. The setup I'd made in week 2 didn't compile on Cygwin and MingW because I hadn't used the output from sdl2-config to configure the library paths and compiler flags. After some help from the SDL wiki and some Googling on my own I managed to configure autotools to use sdl2-config correctly. I haven't been able to test the new setup on Cygwin/MinGW yet but it works just fine on Ubuntu and Linux Mint.&lt;/li&gt;
&lt;li&gt;I've implemented the process API for Linux.&lt;/li&gt;
&lt;li&gt;Implemented parsing for arguments passed to the test harness and for config files. The way this works is quite similar to the way SDLTest_CommonArg() works.&lt;/li&gt;
&lt;li&gt;Implemented a tokenizer to break the arguments string to the SUT into an argv-style array. This was required because all the calls in the exec() family expect a list of arguments while Windows' CreateProcess() expects a single arguments string.&lt;/li&gt;
&lt;li&gt;Added a timer to kill the SUT after a maximum timeout.&lt;/li&gt;
&lt;li&gt;I've started working on parsing a config file that describes what kind of options an SUT application can take. The idea so far is that the file will be represented in JSON where each option will be a JSON object. JSON is an ideal choice because it's easy to write, light weight and easy to parse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week I completed the design and core infrastructure theme and began work on the next one, which deals with varying the SUT command line options.&lt;/p&gt;</summary><category term="gsoc"></category><category term="sdl"></category></entry><entry><title>GSoC 2013 Week 2 Review</title><link href="http://nerdap.github.io/gsoc-2013-week-2.html" rel="alternate"></link><updated>2013-07-02T18:23:00+05:30</updated><author><name>Apoorv Upreti</name></author><id>tag:nerdap.github.io,2013-07-02:gsoc-2013-week-2.html</id><summary type="html">&lt;p&gt;Last week I set up a basic API for launching and terminating processes on Windows. The API so far consists of just three functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SDL_LaunchProcess():&lt;/strong&gt; Launches a process with some command line arguments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDL_IsProcessRunning():&lt;/strong&gt; Checks if a process is running or not.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDL_KillProcess():&lt;/strong&gt; Kills the specified process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also had to get a build setup working on Linux using autotools. It wasn't easy getting started - good tutorials that started from the basics were hard to find. The best resource I found was a &lt;a href="http://www.lrde.epita.fr/~adl/autotools.html"&gt;set of slides&lt;/a&gt; by Alexandre Duret-Lutz. I did get a build setup working in end, although I'll have to get some expert advice on it to make sure it's acceptable.&lt;/p&gt;
&lt;p&gt;I've added doxygen documentation for functions and structs in the current API.&lt;/p&gt;
&lt;p&gt;One issue to think about:&lt;/p&gt;
&lt;p&gt;At least on Linux, PIDs can be reused. So IsProcessRunning() can report a process as running while in fact the process may have terminated a while back and a different process with the same PID may have taken its place. I'm not sure if this is a situation that I'll run into often enough for it to warrant fixing.&lt;/p&gt;
&lt;p&gt;Next steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement process API for Linux.&lt;/li&gt;
&lt;li&gt;Implement parsing command line parameters to the testharness.&lt;/li&gt;
&lt;li&gt;Implement loading these command line parameters from a config file.&lt;/li&gt;
&lt;li&gt;Timed quit for the SUT.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="sdl"></category></entry><entry><title>GSoC 2013 Week 1 Review</title><link href="http://nerdap.github.io/gsoc-2013-week-1.html" rel="alternate"></link><updated>2013-06-23T22:16:00+05:30</updated><author><name>Apoorv Upreti</name></author><id>tag:nerdap.github.io,2013-06-23:gsoc-2013-week-1.html</id><summary type="html">&lt;p&gt;At the end of the community bonding period, Andreas and I went through the product backlog, adding demoables, sizing and reordering items, and adding and reorganizing themes. It was an interesting exercise because it helped me fully understand the complexity of the project and plan my future weeks better.&lt;/p&gt;
&lt;p&gt;And so began the GSoC coding period. The first theme I'm working on concerns the design and core infrastructure of the new visual test system. I didn't make as much progress as I wanted to this week but I feel it's a reasonable start.&lt;/p&gt;
&lt;p&gt;Progress so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product backlog is &lt;a href="https://github.com/nerdap/autotestsprite2/wiki/Product-Backlog"&gt;up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set up a Bitbucket &lt;a href="https://bitbucket.org/nerdap/sdlvisualtest"&gt;repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/nerdap/autotestsprite2/wiki/Test-system-design"&gt;design document&lt;/a&gt; is ready, but it's still a work in progress. I'll be adding more details soon.&lt;/li&gt;
&lt;li&gt;Wrote a simple test harness for windows that launches a process (passed as a command line parameter) and returns the exit code.&lt;/li&gt;
&lt;li&gt;Created a Visual Studio 2012 solution to build the project; makefiles are coming soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's next?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make/Configure scripts so we can build on Linux.&lt;/li&gt;
&lt;li&gt;Adding a Doxygen make target.&lt;/li&gt;
&lt;li&gt;Adding Linux support in the test harness.&lt;/li&gt;
&lt;li&gt;Updating the design document with more details.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="sdl"></category></entry><entry><title>Google Summer of Code 2013 under SDL</title><link href="http://nerdap.github.io/gsoc-2013-sdl.html" rel="alternate"></link><updated>2013-06-10T17:00:00+05:30</updated><author><name>Apoorv Upreti</name></author><id>tag:nerdap.github.io,2013-06-10:gsoc-2013-sdl.html</id><summary type="html">&lt;p&gt;SDL or Simple DirectMedia Layer is a low-level, cross-platform multimedia library that provides access to keyboard, mouse, audio and video hardware. It's available for Windows, Linux, OS X, iOS, Android, and many other platforms.&lt;/p&gt;
&lt;p&gt;My GSoC project concerns a test in the SDL test suite called testsprite2. This test simply launches a window and moves sprites around the screen as fast as possible. The basic objective of the test is to answer three questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the window being created by the window manager as expected? (correct title, resolution, window state, etc.)&lt;/li&gt;
&lt;li&gt;Is mouse behavior being detected correctly?&lt;/li&gt;
&lt;li&gt;Are the sprites inside the window rendered correctly?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The goal of this GSoC project is to automate this process. There are two major challenges to overcome. Firstly, testsprite2 takes 26 parameters as input with thousands of valid combinations. Success would mean testing as many valid combinations as possible. Secondly, verifying the success of the test is inherently hard to automate - it's much easier for a human to answer the above questions than for a computer to. By automating testsprite2, I hope to make it easier to detect certain kinds of bugs in SDL's code, ones that were missed out previously.&lt;/p&gt;
&lt;p&gt;I started using SDL years ago when I was still in high school. I fondly remember following lazy_foo's tutorials and struggling with concepts like blitting, double buffering and alpha blending. This is why the opportunity to make SDL better means a lot to me. I'm looking forward to working towards a top quality SDL 2.0 release this summer.&lt;/p&gt;
&lt;p&gt;Useful Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.libsdl.org/gsoc.php" title="SDL GSoC Ideas Page"&gt;GSoC Ideas Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nerdap/autotestsprite2/wiki" title="Project Wiki on GitHub"&gt;Project Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/nerdap/10001" title="Application on Melange"&gt;Application on Melange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="sdl"></category></entry></feed>